
== Provision an Aks Cluster with Terraform

:url-az-account: https://portal.azure.com/#home

:url-az-CLI:  https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest

:url-az-kubectl: https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-deploy-cluster?tabs=azure-cli

:url-helm:  https://helm.sh/docs/intro/install/

:url-terraform: https://learn.hashicorp.com/tutorials/terraform/install-cli

:url-repo-code:

The Azure Kubernetes Service (AKS) is a fully managed Kubernetes service for deploying, managing and scaling containerized applications on Azure.

== *Prerequisites:*

. Sign up into {url-az-account}[Azure Account].
. Install the Azure {url-az-CLI}[CLI].
. Install the {url-az-kubectl}[kubectl].
. Install the {url-helm}[Helm].
. Install the {url-terraform}[Terraform].

== *Login to Azure Account*

Before the terraform implementation we need to login Azure account through Azure CLI.

`az login`

== *Set-Up And Initialize Terraform Workspace*

In your terminal, clone the following {url-repo-code}[repository] code.

`$ git clone https://github.com/devon4quarkus-reference/terraform`

You can explore this repository by changing directories.

`cd terraform`

List of the files used to provision the Aks Cluster.

. `aks-cluster.tf` provisions a Resource Group and Aks Cluster. The default node pool defines the number of VMs and the VM type cluster uses.

. `variables.tf` declares the variables to terraform, It can use reference to its configuration.

. `terraform.tfvars` defines the variables values to terraform.

. `outputs.tf` declares values that can be useful to interact with your Aks Cluster.

. `versions.tf` set the Terraform version and defines the required provider block.

== *Create an Active Directory Service Principal Account*

Here you will use an Azure Active Directory Service Principal to authenticate the Azure provider. 

First, you need to create an Active Directory Service Principal account using the Azure CLI. You should see something like the following.

```
$ az ad sp create-for-rbac --name az-aks-sp --role Contributor

{
  "appId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
  "displayName": "azure-cli-2021-11-17-00-46-05",
  "name": "http://azure-cli-2021-11-17-00-46-05",
  "password": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
  "tenant": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
}

```

== *Update your terraform.tfvars file*

Replace the values in your `terraform.tfvars` file with your `appId` and `password`, Terraform will use these values to authenticate to Azure before provisioning your resources. 

```
# terraform.tfvars
appId    = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
password = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa" 

```
== *Deploy Helm-charts with the Helm Provider*

The Terraform Helm provider allows you to deploy and manage your Kubernetes applications dynamically and securely.

Create the Helm Provider in `aks-cluster.tf` and configure the helm repository location.

== *Initialize Terraform*
After you have saved your customized variables file, Initialize your Terraform workspace, which will download the provider and initialize it with the values provided in your terraform.tfvars file.

`$ terraform init`

== *Terraform plan*
Terraform plan creates an execution of plan and evaluates a Terraform configuration to determine the desired state of all the resources it declares.

`$terraform plan`

== *Terraform apply*
Terraform apply will review the planned actions, your terminal output should indicate the plan is running and what resources will be created.

`$ terraform apply`

You can see this terraform apply will provision an Azure Resource Group and Aks Cluster. Confirm the apply with a yes.

== *Configure kubectl*

Now that you've provisioned your AKS Cluster, you need to configure kubectl.

Run the following command to retrieve the access credentials for your cluster and automatically configure kubectl.

`az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)`

The Resource Group name and Kubernetes cluster name correspond to the output variables showed after the successful Terraform run.

== *Access Kubernetes Dashboard*
Run the following command to generate the Azure portal link.

`az aks browse --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)`

Go to the URL in your preferred browser to view the Kubernetes resource view.

== *Clean up your workspace*
Run the destroy command and confirm with yes in your terminal.

`$ terraform destroy`

```
Note: terraform destroy can clean your Aks Cluster but not Resource Group, Because we are not authorized to perform RG deletion. For the RG deletion we need to raise ticket for IT Group.
```

